---
- name: Include all yml variables in vars/all
  ansible.builtin.include_vars:
    dir: vars/hosts
    extensions:
      - 'yml'

- name: Ensure group MySQL exists
  ansible.builtin.group:
    name: "{{ mysql_group }}"
    state: present

- name: Add mysql user
  user:
    name: "{{ mysql_user }}"
    comment: MariaDB daemon
    group: "{{ mysql_group }}"
    create_home: no
    shell: /sbin/nologin
    state: present

- name: Include lvm-create.yml
  tags: lvm
  ansible.builtin.import_tasks: lvm-create.yml
 
- name: Include preconf.yml
  ansible.builtin.import_tasks: preconf.yml

- name: Include validate.yml
  ansible.builtin.import_tasks: validate.yml

##  Percona Tools
##  =============

- name: Adds percona key
  ansible.builtin.command: "gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys {{ item }}"
  with_items:
    - E1E2CD202D607DAF
    - 1C4CBDCDCD2EFD2A
    - 9334A25F8507EFA5
    - 9E003FA64CAC6D72

- name: Add Percona apt repository
  apt:
    deb: "https://repo.percona.com/apt/percona-release_latest.{{ ansible_distribution_release | lower }}_all.deb"
    update_cache: true
    state: present
  tags: repo


- name: Update apt-get repo and cache
  ansible.builtin.apt:
    update_cache: true
    force_apt_get: true

- name: Install Xtrabackup
  ansible.builtin.apt:
    name: percona-xtrabackup-24
    state: present

# Percona Toolkit

- name: Install Percona Toolkit
  package:
    name: percona-toolkit
    state: present


##  Other Packages
##  ==============

- name: Install socat
  tags: [ mariadb-galera ]
  package:
    name: socat
    state: present


##  Prepare MariaDB installation
##  ==========================

- name: Install mariadb-server First Node
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  with_items: 
    - mariadb-server 
    - mariadb-client 
    - galera-4
    - galera-arbitrator-4
  when: 
    - inventory_hostname in groups["nodo1_local"]

- name: Install mariadb-server Rest of Nodes.
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  with_items: 
    - mariadb-server 
    - mariadb-client 
    - galera-4
  when:
    - inventory_hostname in groups["nodo_n_local"]

- name: Replace init mariadb.service
  ansible.builtin.replace:
    path: /usr/lib/systemd/system/mariadb.service
    regexp: 'LimitNOFILE=32768'
    replace: 'LimitNOFILE=infinity'
  ignore_errors: true

- name: Replace init mariadb.service2
  ansible.builtin.replace:
    path: /usr/lib/systemd/system/mariadb.service
    regexp: 'LimitMEMLOCK=524288'
    replace: 'LimitMEMLOCK=16777216'
  ignore_errors: true

- name: Reload service Mariadb
  ansible.builtin.systemd:
    name: mariadb.service
    state: reloaded

- name: Create Paths
  file:
    path: "{{ item }}"
    owner: "{{ mysql_user }}"
    group: "{{ mysql_group }}"
    mode: '0770'
    recurse: yes
    state: directory
  with_items: "{{ paths }}"


- name: Set MariaDB datadir permissions
  file:
    path: "{{ mysql_data_dir }}"
    owner: "{{ mysql_user }}"
    group: "{{ mysql_group }}"
    mode: '777'

- name: Set MariaDB logs permissions
  file:
    path: "{{ mysql_log_dir }}"
    owner: "{{ mysql_user }}"
    group: "{{ mysql_group }}"
    mode: '777'

- name: Copy each file over that matches the given pattern
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "/etc/ssl/certs/"
    mode: '600'
  with_fileglob:
    - "./files/*"
  

- name: Add lib to ld.so.conf
  lineinfile:
    dest=/etc/ld.so.conf
    line="{{ mysql_base_dir }}/lib/"

- name: ldconfig
  command: /sbin/ldconfig
  ignore_errors: true


- name: Delete files/dirs not created by us
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /etc/mysql/conf.d
    - /etc/mysql/my.cnf.fallback
    - /etc/mysql/percona-server.cnf
    - /etc/mysql/percona-server.conf.d

- name: Copy my.cnf
  template:
    src="./templates/config-groups/{{ primary_config_group }}.cnf.j2"
    dest=/etc/mysql/my.cnf

- name: Create configuration include subdir
  file:
    path: "{{ mysql_conf_dir }}/include"
    owner: "{{ mysql_user }}"
    group: "{{ mysql_group }}"
    mode: '777'
    state: directory

- name: Copy wsrep.cnf (first node)
  template:
    src="./templates/wsrep/first_node.cnf.j2"
    dest=/etc/mysql/include/wsrep.cnf
  when: inventory_hostname in groups["nodo1_local"]

- name: Copy wsrep.cnf (default)
  template:
    src="./templates/wsrep/default.cnf.j2"
    dest=/etc/mysql/include/wsrep.cnf
  when: 
    - inventory_hostname in groups["nodo_n_local"]

# Error with local_action try to run in localhost
- name: Check if host config file exists
  command: stat path="/etc/mysql/{{ inventory_hostname }}.cnf"
  register: host_config_file

- name: Copy host config file if exists
  template:
    src="./templates/config-hosts/{{ inventory_hostname }}.cnf.j2"
    dest="/etc/mysql/{{ inventory_hostname }}.cnf"
  when: host_config_file.stat.exists == true



# Running mysqld --initialize with non-empty directory should be safe,
# because it is supposed to fail. But not to rely on this is better.
# Also, it would be problematic to check if the command succeeded.
# So first we use a BASH command to get the number of files in the datadir.
- name: Check if datadir is empty
  shell: >
    ls -1 "{{ mysql_data_dir }}" |wc -l
  register: datadir_file_count

- name: Initialize datadir
  command: "{{ mysql_base_dir }}/bin/mysqld --initialize --user='{{ mysql_user }}'"
  ignore_errors: true
  when: datadir_file_count.stdout == '0'

- name: Add MariaDB bin path to profile
  lineinfile: dest=/etc/profile line="export PATH=$PATH:{{ mysql_base_dir }}/bin/"

- name: Add custom scripts path to profile
  lineinfile: dest=/etc/profile line="export PATH=$PATH:{{ script_dir }}"

- name: Run profile
  shell: executable=/bin/bash source /etc/profile

- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: "/var/log/mysql/{{ item }}"
    state: directory
    owner: mysql
    group: mysql
    mode: '0770'
  with_items:
    - error
    - bin
    - general
    - tmp

- name: Replace 
  ansible.builtin.replace:
    path: /var/lib/mysql/grastate.dat
    regexp: 'safe_to_bootstrap: 0'
    replace: 'safe_to_bootstrap: 1'
  when: inventory_hostname in groups["nodo1_local"]
  ignore_errors: true

- name: Restart mysql
  service:
    name=mysql
    state=restarted
  when: inventory_hostname in groups["nodo1_local"]

- import_tasks: mysql-initial-queries.yml

##  Logrotate
##  =========

- name: Create mysql_logrotate_old_dir
  file:
    path: "{{ mysql_logrotate_old_dir }}"
    owner: mysql
    group: mysql
    mode: '770'
    state: directory

- name: Configure logrotate
  template:
    src: "../templates/logrotate.j2"
    dest: "/etc/logrotate.d/mariadb"


##  Timezone Info
##  =============

- name: Update timezone info (first node)
  apt:
    name: tzdata
    state: latest
    install_recommends: no
  register: timezone_info
  when: inventory_hostname in groups["nodo1_local"]

- name: Restart mysql
  service:
    name=mysql
    state=restarted
  when: 
    - inventory_hostname in groups["nodo_n_local"]

- import_tasks: hardening.yml

